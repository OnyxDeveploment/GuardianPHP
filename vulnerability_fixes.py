vulnerability_fixes = {
    "XSS": {
        "description": "Cross-Site Scripting (XSS) allows attackers to inject malicious scripts into webpages viewed by users.",
        "fix": "Use `htmlspecialchars()` or `htmlentities()` when outputting user input. Implement Content Security Policy (CSP) and sanitize inputs properly."
    },
    "SQL Injection": {
        "description": "SQL Injection allows attackers to manipulate SQL queries and access sensitive data.",
        "fix": "Use prepared statements and parameterized queries with PDO or MySQLi. Avoid directly embedding user input in SQL queries."
    },
    "Local File Inclusion (LFI)": {
        "description": "LFI allows an attacker to include unauthorized files on a server, potentially leading to code execution.",
        "fix": "Validate file paths, avoid using user-controlled `include()` or `require()`, and restrict file access to known-safe directories."
    },
    "Remote File Inclusion (RFI)": {
        "description": "RFI occurs when attackers can load external remote scripts into the application.",
        "fix": "Disable `allow_url_include` in `php.ini`, validate user input, and use strict allowlists for file inclusion."
    },
    "Unrestricted File Upload": {
        "description": "Allows malicious file uploads, leading to remote code execution or server compromise.",
        "fix": "Validate file types and extensions, use secure file storage directories, and disable execution permissions on upload folders."
    },
    "OS Command Injection": {
        "description": "Allows execution of system commands, leading to complete server compromise.",
        "fix": "Avoid using functions like `exec()`, `system()`, `shell_exec()`, and `passthru()`. Use `escapeshellarg()` and `escapeshellcmd()` to sanitize inputs if necessary."
    },
    "Server-Side Request Forgery (SSRF)": {
        "description": "SSRF allows attackers to send unauthorized requests from the server, potentially accessing internal services.",
        "fix": "Use allowlists for external URLs, restrict outgoing requests, and validate user inputs to prevent manipulation."
    },
    "Insecure Direct Object Reference (IDOR)": {
        "description": "IDOR allows attackers to access or modify objects they shouldn't by changing request parameters.",
        "fix": "Implement proper access controls, use session-based validation, and avoid exposing sensitive object references in URLs."
    },
    "Remote Code Execution (RCE)": {
        "description": "RCE allows attackers to execute arbitrary code on the server, leading to full system compromise.",
        "fix": "Use safer alternatives like `create_function()`, and always validate input data."
    },
    "Session Fixation": {
        "description": "Allows attackers to hijack a user's session by setting a predefined session ID.",
        "fix": "Regenerate session IDs after login using `session_regenerate_id(true)` and use secure cookies."
    },
    "Broken Authentication": {
        "description": "Weak authentication mechanisms allow attackers to gain unauthorized access to user accounts.",
        "fix": "Use strong password policies, enforce multi-factor authentication (MFA), and implement session expiration."
    },
    "Weak Cryptography": {
        "description": "Using weak hashing algorithms like MD5 and SHA1 makes stored data easy to crack.",
        "fix": "Use strong hashing functions like `password_hash()` with bcrypt or Argon2. Never store passwords in plaintext."
    },
    "Hardcoded Credentials": {
        "description": "Storing sensitive credentials (passwords, API keys) in source code can lead to security breaches.",
        "fix": "Use environment variables to store sensitive information, and never commit secrets to source code repositories."
    },
    "Security Misconfiguration": {
        "description": "Poor security settings or missing patches can expose applications to vulnerabilities.",
        "fix": "Regularly update software, disable unnecessary services, and apply least-privilege principles."
    },
    "Using Components with Known Vulnerabilities": {
        "description": "Relying on outdated or insecure third-party libraries can introduce vulnerabilities.",
        "fix": "Keep dependencies updated, monitor security advisories, and use tools like OWASP Dependency-Check."
    },
    "Cross-Site Request Forgery (CSRF)": {
        "description": "CSRF tricks users into performing actions without their consent by leveraging authenticated sessions.",
        "fix": "Use anti-CSRF tokens, validate HTTP headers, and implement re-authentication for sensitive actions."
    },
    "Insecure Deserialization": {
        "description": "Deserializing untrusted data can lead to remote code execution or logic manipulation.",
        "fix": "Use JSON instead of serialize() and unserialize(). If necessary, validate the input before unserializing",
    },
    "Insufficient Logging and Monitoring": {
        "description": "Lack of security logging and monitoring can delay detection of security breaches.",
        "fix": "Implement centralized logging, monitor security-related events, and set up alerts for unusual activity."
    },
    "Insufficient Protection from Brute-Force Attacks": {
        "description": "Failure to protect against repeated authentication attempts can lead to account takeovers.",
        "fix": "Enforce account lockouts, implement rate limiting, and require CAPTCHAs on login attempts."
    },
    "Directory Traversal": {
        "description": "Allows attackers to access arbitrary files outside of the intended directory structure.",
        "fix": "Sanitize user input, restrict file access to specific directories, and use allowlists."
    },
    "XML External Entity (XXE) Injection": {
        "description": "Exploits XML parsers to access sensitive files, perform denial-of-service attacks, or execute remote requests.",
        "fix": "Disable external entity parsing in XML processors, and validate all XML input."
    },
    "Man-in-the-Middle (MITM) Attacks": {
        "description": "Attackers intercept and manipulate communication between users and the server.",
        "fix": "Enforce HTTPS using TLS, enable HSTS, and use secure cookie attributes."
    },
    "Clickjacking": {
        "description": "Tricks users into clicking elements they donâ€™t intend to by embedding malicious overlays.",
        "fix": "Use `X-Frame-Options: DENY` and Content Security Policy (CSP) frame restrictions."
    },
    "Unvalidated Redirects and Forwards": {
        "description": "Allows attackers to redirect users to malicious sites by manipulating URL parameters.",
        "fix": "Use allowlists for redirects, validate user input, and avoid using direct URL parameters for navigation."
    },
    "Prototype Pollution": {
        "description": "Affects JavaScript applications by allowing attackers to modify prototype objects, leading to unexpected behavior.",
        "fix": "Use deep object validation, freeze objects where possible, and avoid directly modifying prototypes."
    },
    "DNS Rebinding": {
        "description": "Exploits browsers to bypass same-origin policy and interact with internal network services.",
        "fix": "Enforce DNS pinning, validate request origins, and implement proper CORS policies."
    },
    "Memory Corruption": {
        "description": "Exploits vulnerabilities in memory management to execute arbitrary code or crash applications.",
        "fix": "Use secure programming practices, enable ASLR (Address Space Layout Randomization), and employ memory-safe languages where possible."
    },
    "Integer Overflow and Underflow": {
        "description": "Exploits numerical vulnerabilities to manipulate application behavior.",
        "fix": "Validate numeric inputs, enforce strict type checking, and use safe integer operations."
    },
    "Race Conditions": {
        "description": "Occurs when multiple processes access shared resources in an unsafe manner, leading to unpredictable behavior.",
        "fix": "Use proper synchronization mechanisms such as locks and atomic operations."
    },
    "Business Logic Flaws": {
        "description": "Exploits weaknesses in application workflows that allow unauthorized actions.",
        "fix": "Conduct thorough security reviews of application logic and enforce business rules at the server-side."
    },
    "Improper Error Handling": {
        "description": "Disclosing detailed error messages can expose sensitive information or application logic.",
        "fix": "Use generic error messages for users and log detailed errors securely."
    },
    "PHP Object Injection": {
        "description": "Occurs when untrusted input is passed to `unserialize()`, allowing attackers to execute arbitrary PHP objects.",
        "fix": "Avoid `unserialize()` on user input and use `json_decode()` instead."
    },
    "Exposed API Endpoints": {
        "description": "Publicly accessible API endpoints may allow unauthorized access or data leakage.",
        "fix": "Enforce authentication, authorization, and rate limiting on all API endpoints."
    }
}
